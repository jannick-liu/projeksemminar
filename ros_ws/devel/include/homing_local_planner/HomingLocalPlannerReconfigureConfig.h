//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the homing_local_planner package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __homing_local_planner__HOMINGLOCALPLANNERRECONFIGURECONFIG_H__
#define __homing_local_planner__HOMINGLOCALPLANNERRECONFIGURECONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace homing_local_planner
{
  class HomingLocalPlannerReconfigureConfigStatics;

  class HomingLocalPlannerReconfigureConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(HomingLocalPlannerReconfigureConfig &config, const HomingLocalPlannerReconfigureConfig &max, const HomingLocalPlannerReconfigureConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const HomingLocalPlannerReconfigureConfig &config1, const HomingLocalPlannerReconfigureConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, HomingLocalPlannerReconfigureConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const HomingLocalPlannerReconfigureConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, HomingLocalPlannerReconfigureConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const HomingLocalPlannerReconfigureConfig &config) const = 0;
      virtual void getValue(const HomingLocalPlannerReconfigureConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T HomingLocalPlannerReconfigureConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T HomingLocalPlannerReconfigureConfig::* field;

      virtual void clamp(HomingLocalPlannerReconfigureConfig &config, const HomingLocalPlannerReconfigureConfig &max, const HomingLocalPlannerReconfigureConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const HomingLocalPlannerReconfigureConfig &config1, const HomingLocalPlannerReconfigureConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, HomingLocalPlannerReconfigureConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const HomingLocalPlannerReconfigureConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, HomingLocalPlannerReconfigureConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const HomingLocalPlannerReconfigureConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const HomingLocalPlannerReconfigureConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, HomingLocalPlannerReconfigureConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, HomingLocalPlannerReconfigureConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(HomingLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class ROBOT
{
  public:
    ROBOT()
    {
      state = true;
      name = "Robot";
    }

    void setParams(HomingLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_vel_x"==(*_i)->name){max_vel_x = boost::any_cast<double>(val);}
        if("max_vel_x_backwards"==(*_i)->name){max_vel_x_backwards = boost::any_cast<double>(val);}
        if("max_vel_theta"==(*_i)->name){max_vel_theta = boost::any_cast<double>(val);}
        if("acc_lim_x"==(*_i)->name){acc_lim_x = boost::any_cast<double>(val);}
        if("acc_lim_theta"==(*_i)->name){acc_lim_theta = boost::any_cast<double>(val);}
        if("min_turn_radius"==(*_i)->name){min_turn_radius = boost::any_cast<double>(val);}
        if("turn_around_priority"==(*_i)->name){turn_around_priority = boost::any_cast<bool>(val);}
        if("stop_dist"==(*_i)->name){stop_dist = boost::any_cast<double>(val);}
        if("dec_dist"==(*_i)->name){dec_dist = boost::any_cast<double>(val);}
      }
    }

    double max_vel_x;
double max_vel_x_backwards;
double max_vel_theta;
double acc_lim_x;
double acc_lim_theta;
double min_turn_radius;
bool turn_around_priority;
double stop_dist;
double dec_dist;

    bool state;
    std::string name;

    
}robot;

class GOALTOLERANCE
{
  public:
    GOALTOLERANCE()
    {
      state = true;
      name = "GoalTolerance";
    }

    void setParams(HomingLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("xy_goal_tolerance"==(*_i)->name){xy_goal_tolerance = boost::any_cast<double>(val);}
        if("yaw_goal_tolerance"==(*_i)->name){yaw_goal_tolerance = boost::any_cast<double>(val);}
      }
    }

    double xy_goal_tolerance;
double yaw_goal_tolerance;

    bool state;
    std::string name;

    
}goaltolerance;

class TRAJECTORY
{
  public:
    TRAJECTORY()
    {
      state = true;
      name = "Trajectory";
    }

    void setParams(HomingLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_global_plan_lookahead_dist"==(*_i)->name){max_global_plan_lookahead_dist = boost::any_cast<double>(val);}
        if("global_plan_viapoint_sep"==(*_i)->name){global_plan_viapoint_sep = boost::any_cast<double>(val);}
        if("global_plan_goal_sep"==(*_i)->name){global_plan_goal_sep = boost::any_cast<double>(val);}
        if("global_plan_prune_distance"==(*_i)->name){global_plan_prune_distance = boost::any_cast<double>(val);}
      }
    }

    double max_global_plan_lookahead_dist;
double global_plan_viapoint_sep;
double global_plan_goal_sep;
double global_plan_prune_distance;

    bool state;
    std::string name;

    
}trajectory;

class OPTIMIZATION
{
  public:
    OPTIMIZATION()
    {
      state = true;
      name = "Optimization";
    }

    void setParams(HomingLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("k_rho"==(*_i)->name){k_rho = boost::any_cast<double>(val);}
        if("k_alpha"==(*_i)->name){k_alpha = boost::any_cast<double>(val);}
        if("k_phi"==(*_i)->name){k_phi = boost::any_cast<double>(val);}
      }
    }

    double k_rho;
double k_alpha;
double k_phi;

    bool state;
    std::string name;

    
}optimization;

}groups;



//#line 9 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double max_vel_x;
//#line 13 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double max_vel_x_backwards;
//#line 17 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double max_vel_theta;
//#line 21 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double acc_lim_x;
//#line 25 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double acc_lim_theta;
//#line 29 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double min_turn_radius;
//#line 33 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      bool turn_around_priority;
//#line 37 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double stop_dist;
//#line 41 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double dec_dist;
//#line 48 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double xy_goal_tolerance;
//#line 52 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double yaw_goal_tolerance;
//#line 59 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double max_global_plan_lookahead_dist;
//#line 63 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double global_plan_viapoint_sep;
//#line 67 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double global_plan_goal_sep;
//#line 71 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double global_plan_prune_distance;
//#line 77 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double k_rho;
//#line 81 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double k_alpha;
//#line 85 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      double k_phi;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("HomingLocalPlannerReconfigureConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const HomingLocalPlannerReconfigureConfig &__max__ = __getMax__();
      const HomingLocalPlannerReconfigureConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const HomingLocalPlannerReconfigureConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const HomingLocalPlannerReconfigureConfig &__getDefault__();
    static const HomingLocalPlannerReconfigureConfig &__getMax__();
    static const HomingLocalPlannerReconfigureConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const HomingLocalPlannerReconfigureConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void HomingLocalPlannerReconfigureConfig::ParamDescription<std::string>::clamp(HomingLocalPlannerReconfigureConfig &config, const HomingLocalPlannerReconfigureConfig &max, const HomingLocalPlannerReconfigureConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class HomingLocalPlannerReconfigureConfigStatics
  {
    friend class HomingLocalPlannerReconfigureConfig;

    HomingLocalPlannerReconfigureConfigStatics()
    {
HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT, HomingLocalPlannerReconfigureConfig> Default("Default", "", 0, 0, true, &HomingLocalPlannerReconfigureConfig::groups);
HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::ROBOT, HomingLocalPlannerReconfigureConfig::DEFAULT> Robot("Robot", "tab", 0, 1, true, &HomingLocalPlannerReconfigureConfig::DEFAULT::robot);
//#line 9 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.max_vel_x = 0.01;
//#line 9 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.max_vel_x = 100.0;
//#line 9 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.max_vel_x = 0.3;
//#line 9 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_x", "double", 0, "Maximum velocity in the x direction of the robot", "", &HomingLocalPlannerReconfigureConfig::max_vel_x)));
//#line 9 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_x", "double", 0, "Maximum velocity in the x direction of the robot", "", &HomingLocalPlannerReconfigureConfig::max_vel_x)));
//#line 13 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.max_vel_x_backwards = 0.01;
//#line 13 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.max_vel_x_backwards = 100.0;
//#line 13 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.max_vel_x_backwards = 0.2;
//#line 13 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_x_backwards", "double", 0, "Maximum translational velocity of the robot for driving backwards", "", &HomingLocalPlannerReconfigureConfig::max_vel_x_backwards)));
//#line 13 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_x_backwards", "double", 0, "Maximum translational velocity of the robot for driving backwards", "", &HomingLocalPlannerReconfigureConfig::max_vel_x_backwards)));
//#line 17 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.max_vel_theta = 0.01;
//#line 17 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.max_vel_theta = 100.0;
//#line 17 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.max_vel_theta = 0.5;
//#line 17 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_theta", "double", 0, "Maximum angular velocity of the robot", "", &HomingLocalPlannerReconfigureConfig::max_vel_theta)));
//#line 17 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_theta", "double", 0, "Maximum angular velocity of the robot", "", &HomingLocalPlannerReconfigureConfig::max_vel_theta)));
//#line 21 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.acc_lim_x = 0.01;
//#line 21 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.acc_lim_x = 100.0;
//#line 21 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.acc_lim_x = 0.2;
//#line 21 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("acc_lim_x", "double", 0, "Maximum translational acceleration of the robot", "", &HomingLocalPlannerReconfigureConfig::acc_lim_x)));
//#line 21 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("acc_lim_x", "double", 0, "Maximum translational acceleration of the robot", "", &HomingLocalPlannerReconfigureConfig::acc_lim_x)));
//#line 25 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.acc_lim_theta = 0.01;
//#line 25 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.acc_lim_theta = 100.0;
//#line 25 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.acc_lim_theta = 0.2;
//#line 25 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("acc_lim_theta", "double", 0, "Maximum angular acceleration of the robot", "", &HomingLocalPlannerReconfigureConfig::acc_lim_theta)));
//#line 25 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("acc_lim_theta", "double", 0, "Maximum angular acceleration of the robot", "", &HomingLocalPlannerReconfigureConfig::acc_lim_theta)));
//#line 29 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.min_turn_radius = 0.0;
//#line 29 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.min_turn_radius = 100.0;
//#line 29 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.min_turn_radius = 0.0;
//#line 29 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("min_turn_radius", "double", 0, "Minimum turning radius of the robot", "", &HomingLocalPlannerReconfigureConfig::min_turn_radius)));
//#line 29 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("min_turn_radius", "double", 0, "Minimum turning radius of the robot", "", &HomingLocalPlannerReconfigureConfig::min_turn_radius)));
//#line 33 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.turn_around_priority = 0;
//#line 33 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.turn_around_priority = 1;
//#line 33 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.turn_around_priority = 1;
//#line 33 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<bool>("turn_around_priority", "bool", 0, "If true, the robot preferentially adjusts the orientation to fit the direction of the path", "", &HomingLocalPlannerReconfigureConfig::turn_around_priority)));
//#line 33 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<bool>("turn_around_priority", "bool", 0, "If true, the robot preferentially adjusts the orientation to fit the direction of the path", "", &HomingLocalPlannerReconfigureConfig::turn_around_priority)));
//#line 37 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.stop_dist = 0.01;
//#line 37 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.stop_dist = 100.0;
//#line 37 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.stop_dist = 0.5;
//#line 37 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("stop_dist", "double", 0, "When the Euclidean distance between the nearest lethal point on planned path and the robot frame origin is less than this distance, the robot stops", "", &HomingLocalPlannerReconfigureConfig::stop_dist)));
//#line 37 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("stop_dist", "double", 0, "When the Euclidean distance between the nearest lethal point on planned path and the robot frame origin is less than this distance, the robot stops", "", &HomingLocalPlannerReconfigureConfig::stop_dist)));
//#line 41 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.dec_dist = 0.01;
//#line 41 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.dec_dist = 100.0;
//#line 41 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.dec_dist = 1.0;
//#line 41 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("dec_dist", "double", 0, "When the Euclidean distance between the nearest lethal point on planned path and the robot frame origin is less than this distance, the robot slows down", "", &HomingLocalPlannerReconfigureConfig::dec_dist)));
//#line 41 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("dec_dist", "double", 0, "When the Euclidean distance between the nearest lethal point on planned path and the robot frame origin is less than this distance, the robot slows down", "", &HomingLocalPlannerReconfigureConfig::dec_dist)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Robot.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::ROBOT, HomingLocalPlannerReconfigureConfig::DEFAULT>(Robot)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::ROBOT, HomingLocalPlannerReconfigureConfig::DEFAULT>(Robot)));
HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::GOALTOLERANCE, HomingLocalPlannerReconfigureConfig::DEFAULT> GoalTolerance("GoalTolerance", "tab", 0, 2, true, &HomingLocalPlannerReconfigureConfig::DEFAULT::goaltolerance);
//#line 48 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.xy_goal_tolerance = 0.001;
//#line 48 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.xy_goal_tolerance = 10.0;
//#line 48 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.xy_goal_tolerance = 0.2;
//#line 48 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      GoalTolerance.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("xy_goal_tolerance", "double", 0, "Allowed final euclidean distance to the goal position", "", &HomingLocalPlannerReconfigureConfig::xy_goal_tolerance)));
//#line 48 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("xy_goal_tolerance", "double", 0, "Allowed final euclidean distance to the goal position", "", &HomingLocalPlannerReconfigureConfig::xy_goal_tolerance)));
//#line 52 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.yaw_goal_tolerance = 0.001;
//#line 52 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.yaw_goal_tolerance = 3.2;
//#line 52 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.yaw_goal_tolerance = 0.1;
//#line 52 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      GoalTolerance.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("yaw_goal_tolerance", "double", 0, "Allowed final orientation error to the goal orientation", "", &HomingLocalPlannerReconfigureConfig::yaw_goal_tolerance)));
//#line 52 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("yaw_goal_tolerance", "double", 0, "Allowed final orientation error to the goal orientation", "", &HomingLocalPlannerReconfigureConfig::yaw_goal_tolerance)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      GoalTolerance.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::GOALTOLERANCE, HomingLocalPlannerReconfigureConfig::DEFAULT>(GoalTolerance)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::GOALTOLERANCE, HomingLocalPlannerReconfigureConfig::DEFAULT>(GoalTolerance)));
HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::TRAJECTORY, HomingLocalPlannerReconfigureConfig::DEFAULT> Trajectory("Trajectory", "tab", 0, 3, true, &HomingLocalPlannerReconfigureConfig::DEFAULT::trajectory);
//#line 59 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.max_global_plan_lookahead_dist = 0.0;
//#line 59 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.max_global_plan_lookahead_dist = 50.0;
//#line 59 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.max_global_plan_lookahead_dist = 3.0;
//#line 59 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("max_global_plan_lookahead_dist", "double", 0, "Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size]", "", &HomingLocalPlannerReconfigureConfig::max_global_plan_lookahead_dist)));
//#line 59 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("max_global_plan_lookahead_dist", "double", 0, "Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size]", "", &HomingLocalPlannerReconfigureConfig::max_global_plan_lookahead_dist)));
//#line 63 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.global_plan_viapoint_sep = -0.1;
//#line 63 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.global_plan_viapoint_sep = 10.0;
//#line 63 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.global_plan_viapoint_sep = 0.5;
//#line 63 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("global_plan_viapoint_sep", "double", 0, "Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled]", "", &HomingLocalPlannerReconfigureConfig::global_plan_viapoint_sep)));
//#line 63 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("global_plan_viapoint_sep", "double", 0, "Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled]", "", &HomingLocalPlannerReconfigureConfig::global_plan_viapoint_sep)));
//#line 67 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.global_plan_goal_sep = -0.1;
//#line 67 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.global_plan_goal_sep = 10.0;
//#line 67 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.global_plan_goal_sep = 0.8;
//#line 67 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("global_plan_goal_sep", "double", 0, "Min. separation between last via-points extracted from the global plan and goal", "", &HomingLocalPlannerReconfigureConfig::global_plan_goal_sep)));
//#line 67 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("global_plan_goal_sep", "double", 0, "Min. separation between last via-points extracted from the global plan and goal", "", &HomingLocalPlannerReconfigureConfig::global_plan_goal_sep)));
//#line 71 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.global_plan_prune_distance = -0.1;
//#line 71 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.global_plan_prune_distance = 10.0;
//#line 71 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.global_plan_prune_distance = 0.2;
//#line 71 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("global_plan_prune_distance", "double", 0, "Distance between robot and via_points of global plan which is used for pruning", "", &HomingLocalPlannerReconfigureConfig::global_plan_prune_distance)));
//#line 71 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("global_plan_prune_distance", "double", 0, "Distance between robot and via_points of global plan which is used for pruning", "", &HomingLocalPlannerReconfigureConfig::global_plan_prune_distance)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Trajectory.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::TRAJECTORY, HomingLocalPlannerReconfigureConfig::DEFAULT>(Trajectory)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::TRAJECTORY, HomingLocalPlannerReconfigureConfig::DEFAULT>(Trajectory)));
HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::OPTIMIZATION, HomingLocalPlannerReconfigureConfig::DEFAULT> Optimization("Optimization", "tab", 0, 4, true, &HomingLocalPlannerReconfigureConfig::DEFAULT::optimization);
//#line 77 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.k_rho = 0.0;
//#line 77 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.k_rho = 10.0;
//#line 77 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.k_rho = 1.0;
//#line 77 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("k_rho", "double", 0, "Proportional parameter for linear velocity adjustment based on the Euclidean distance of the robot position to the current target", "", &HomingLocalPlannerReconfigureConfig::k_rho)));
//#line 77 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("k_rho", "double", 0, "Proportional parameter for linear velocity adjustment based on the Euclidean distance of the robot position to the current target", "", &HomingLocalPlannerReconfigureConfig::k_rho)));
//#line 81 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.k_alpha = -10.0;
//#line 81 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.k_alpha = 10.0;
//#line 81 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.k_alpha = -3.0;
//#line 81 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("k_alpha", "double", 0, "Proportional parameter for angular velocity adjustment based on the tangential angle of the target position in the robot's frame of reference", "", &HomingLocalPlannerReconfigureConfig::k_alpha)));
//#line 81 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("k_alpha", "double", 0, "Proportional parameter for angular velocity adjustment based on the tangential angle of the target position in the robot's frame of reference", "", &HomingLocalPlannerReconfigureConfig::k_alpha)));
//#line 85 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __min__.k_phi = -10.0;
//#line 85 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __max__.k_phi = 10.0;
//#line 85 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __default__.k_phi = -1.0;
//#line 85 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("k_phi", "double", 0, "Proportional parameter for angular velocity adjustment based on the difference between the robot's orientation(yaw) and the current target orientation(yaw)", "", &HomingLocalPlannerReconfigureConfig::k_phi)));
//#line 85 "/home/hao/ros_ws/src/homing_local_planner/cfg/HomingLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::ParamDescription<double>("k_phi", "double", 0, "Proportional parameter for angular velocity adjustment based on the difference between the robot's orientation(yaw) and the current target orientation(yaw)", "", &HomingLocalPlannerReconfigureConfig::k_phi)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Optimization.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::OPTIMIZATION, HomingLocalPlannerReconfigureConfig::DEFAULT>(Optimization)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT::OPTIMIZATION, HomingLocalPlannerReconfigureConfig::DEFAULT>(Optimization)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HomingLocalPlannerReconfigureConfig::GroupDescription<HomingLocalPlannerReconfigureConfig::DEFAULT, HomingLocalPlannerReconfigureConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    HomingLocalPlannerReconfigureConfig __max__;
    HomingLocalPlannerReconfigureConfig __min__;
    HomingLocalPlannerReconfigureConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const HomingLocalPlannerReconfigureConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static HomingLocalPlannerReconfigureConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &HomingLocalPlannerReconfigureConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const HomingLocalPlannerReconfigureConfig &HomingLocalPlannerReconfigureConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const HomingLocalPlannerReconfigureConfig &HomingLocalPlannerReconfigureConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const HomingLocalPlannerReconfigureConfig &HomingLocalPlannerReconfigureConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<HomingLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr> &HomingLocalPlannerReconfigureConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<HomingLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr> &HomingLocalPlannerReconfigureConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const HomingLocalPlannerReconfigureConfigStatics *HomingLocalPlannerReconfigureConfig::__get_statics__()
  {
    const static HomingLocalPlannerReconfigureConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = HomingLocalPlannerReconfigureConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __HOMINGLOCALPLANNERRECONFIGURERECONFIGURATOR_H__
